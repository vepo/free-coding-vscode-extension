///usr/bin/env jbang "$0" "$@" ; exit $?
//DEPS dev.langchain4j:langchain4j-ollama:1.2.0
//DEPS ch.qos.logback:logback-classic:1.5.18
//DEPS org.slf4j:slf4j-api:2.0.17

import dev.langchain4j.model.ollama.OllamaChatModel;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.time.Duration;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.CountDownLatch;
import java.util.Scanner;
import java.util.Map;
import java.util.stream.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.nio.file.Paths;

public class server {
    private static final Logger logger = LoggerFactory.getLogger(server.class);
    private static final int BUFFER_SIZE = 1024;
    private static final String DELIMITER = "\n";
    private static final String OPERATION_PATTERN = "^(\\w+) (START|END)$";
    private static String language = "pt-br";
    private static final Map<String, String> PROMPTS = Map.of("en",  """
                                                                     Here is my project code:
                                                                     ```
                                                                     %s
                                                                     ```
                                                                     I'm am a Software Engineer that will make questions about this code.
                                                                     Please, answer the following questions: %s
                                                                     """, 
                                                              "pt-br", """
                                                                       Este é o código fonte do projeto:
                                                                       ```
                                                                       %s
                                                                       ```
                                                                       Eu sou um Engenheiro de Software que fará pergutnas sobre este código.
                                                                       Por favor, responda as seguintes perguntas: %s
                                                                       """);

    public static void main(String... args) {
        try {
            logger.info("Initializing Vibe Coding Agent! Current folder={}", Paths.get("").toAbsolutePath());

            AtomicBoolean running = new AtomicBoolean(true);
            CountDownLatch latch = new CountDownLatch(1);
            Runtime.getRuntime()
                .addShutdownHook(new Thread() {
                    @Override
                    public void run() {
                        logger.info("Shutdown signal received!!!");
                        running.set(false);
                        try {
                            latch.await();
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                        }
                    }
                });
            var model = OllamaChatModel.builder()
                                       .baseUrl("http://localhost:11434")
                                       .modelName("deepseek-coder")
                                       .timeout(Duration.ofMinutes(5))
                                       .build();

            // Set up non-blocking input channel
            var channel = Channels.newChannel(System.in);
            var buffer = ByteBuffer.allocate(BUFFER_SIZE);
            var inputBuffer = new StringBuilder();
            var currentOperation = new StringBuilder();
            String activeOperation = null;
            
            logger.info("Process started!!! Reading input channel...");
            while (running.get()) {
                int bytesRead = channel.read(buffer);
                
                if (bytesRead == -1) {
                    // End of stream
                    break;
                } else if (bytesRead > 0) {
                    buffer.flip();
                    String inputChunk = StandardCharsets.UTF_8.decode(buffer).toString();
                    inputBuffer.append(inputChunk);
                    buffer.clear();

                    // Process complete lines
                    int delimiterPos;
                    while (running.get() && (delimiterPos = inputBuffer.indexOf(DELIMITER)) != -1) {
                        String line = inputBuffer.substring(0, delimiterPos).trim();
                        inputBuffer.delete(0, delimiterPos + DELIMITER.length());
                        logger.info("Processing line: {}", line);
                        if (line.matches(OPERATION_PATTERN)) {
                            String[] parts = line.split(" ");
                            String operation = parts[0];
                            String action = parts[1];
                            
                            if ("START".equals(action)) {
                                if (activeOperation != null) {
                                    logger.warn("Nested operations not supported. Already in operation: {}", activeOperation);
                                } else {
                                    activeOperation = operation;
                                    currentOperation.setLength(0);
                                    logger.info("Operation {} started", activeOperation);
                                }
                            } else if ("END".equals(action)) {
                                if (activeOperation == null) {
                                    logger.warn("END received without active operation");
                                } else if (!activeOperation.equals(operation)) {
                                    logger.warn("END operation mismatch. Expected: {}, got: {}", activeOperation, operation);
                                } else {
                                    logger.info("Operation {} ended", activeOperation);
                                    handleOperation(activeOperation.trim(), currentOperation.toString().trim(), model);
                                    activeOperation = null;
                                }
                            }
                        } else if (activeOperation != null) {
                            currentOperation.append(line).append("\n");
                        }
                    }
                } else {
                    // No data available, sleep briefly
                    Thread.sleep(100);
                }
            }

            latch.countDown();
            logger.info("Server shutdown!");
        } catch (Exception ex) {
            logger.error("Error!", ex);
        }
    }
    
    private static void handleOperation(String operation, String content, OllamaChatModel model) throws IOException {
        logger.info("Operation '{}'", operation);
        switch (operation) {
            case "FREECODING_QUESTION":
                logger.info("Processing FREECODING operation");
                String answer = queryModel(model, content);
                System.out.println("FREECODING_ANSWER START");
                System.out.println(answer);
                System.out.println("FREECODING_ANSWER END");
                break;
            case "SELECT_LANGUAGE": 
                logger.info("Changing language to '{}'", content);
                language = content;
                break;
            default:
                logger.warn("Unknown operation: {}", operation);
                System.out.println(operation + "_ERROR START");
                System.out.println("Unsupported operation: " + operation);
                System.out.println(operation + "_ERROR END");
        }
    }
    
    private static String queryModel(OllamaChatModel model, String question) throws IOException {
        return model.chat(PROMPTS.get(language).formatted(loadProjectCode(), question));
    }

    private static String loadProjectCode() throws IOException {
        Path startPath = Paths.get(".", "src", "main", "java");
        int maxDepth = 10;
        long maxFileSize = 100_000; // 100KB
        
        try (Stream<Path> paths = Files.walk(startPath, maxDepth)) {
            return paths
                .filter(Files::isRegularFile)
                .filter(p -> p.toString().endsWith(".java"))
                .filter(p -> {
                    try {
                        return Files.size(p) <= maxFileSize;
                    } catch (IOException e) {
                        return false;
                    }
                })
                .map(p -> {
                    try {
                        return "File: " + p + "\n" + Files.readString(p);
                    } catch (IOException e) {
                        return "Error reading: " + p;
                    }
                })
                .collect(Collectors.joining("\n\n"));
        }
    }
}