///usr/bin/env jbang "$0" "$@" ; exit $?
//DEPS dev.langchain4j:langchain4j-ollama:1.2.0
//DEPS ch.qos.logback:logback-classic:1.5.18
//DEPS org.slf4j:slf4j-api:2.0.17

import dev.langchain4j.model.ollama.OllamaChatModel;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.time.Duration;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.CountDownLatch;
import java.util.Scanner;
import java.util.stream.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.nio.file.Paths;

public class server {
    private static final Logger logger = LoggerFactory.getLogger(server.class);
    private static final int BUFFER_SIZE = 1024;
    private static final String DELIMITER = "\n";

    public static void main(String... args) {
        try {
            logger.info("Initializing Vibe Coding Agent! Current folder={}", Paths.get("").toAbsolutePath());

            AtomicBoolean running = new AtomicBoolean(true);
            CountDownLatch latch = new CountDownLatch(1);
            Runtime.getRuntime()
                .addShutdownHook(new Thread() {
                    @Override
                    public void run() {
                        logger.info("Shutdown signal received!!!");
                        running.set(false);
                        try {
                            latch.await();
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                        }
                    }
                });

            // Set up non-blocking input channel
            var channel = Channels.newChannel(System.in);
            var buffer = ByteBuffer.allocate(BUFFER_SIZE);
            var inputBuffer = new StringBuilder();
            var content = new StringBuilder();
            logger.info("Process started!!! Reading input channel...");
            while (running.get()) {
                int bytesRead = channel.read(buffer);
                
                if (bytesRead == -1) {
                    // End of stream
                    break;
                } else if (bytesRead > 0) {
                    buffer.flip();
                    String inputChunk = StandardCharsets.UTF_8.decode(buffer).toString();
                    inputBuffer.append(inputChunk);
                    buffer.clear();

                    // Process complete lines
                    int delimiterPos;
                    while (running.get() && (delimiterPos = inputBuffer.indexOf(DELIMITER)) != -1) {
                        String line = inputBuffer.substring(0, delimiterPos);
                        inputBuffer.delete(0, delimiterPos + DELIMITER.length());
                        
                        if (line.equals("FREECODING START")) {
                            content.setLength(0);
                        } else if (line.equals("FREECODING END")) {
                            var question = content.toString();
                            logger.info("Question received! question={}", question);
                            System.out.println("FREECODING_ANSWER START");
                            System.out.println(question);
                            System.out.println("FREECODING_ANSWER END");
                        } else {
                            content.append(line).append("\n");
                        }
                    }
                } else {
                    // No data available, sleep briefly
                    Thread.sleep(100);
                }
            }

            latch.countDown();
            logger.info("Server shutdown!");
        } catch (Exception ex) {
            logger.error("Error!", ex);
        }
        // var model = OllamaChatModel.builder()
        //                            .baseUrl("http://localhost:11434")
        //                            .modelName("deepseek-coder")
        //                            .timeout(Duration.ofMinutes(5)) // Increased timeout
        //                            .build();

        // String prompt = """
        //     Here is my project code:
        //     ```
        //     %s
        //     ```
            
        //     Based on this code, list important changes to make the code more readable and maintainable.
        //     """.formatted(loadProjectCode());

        // // 4. Get and print the answer
        // String answer = model.chat(prompt);
        // System.out.println(answer);
    }

    private static String loadProjectCode() throws IOException {
        Path startPath = Paths.get(".", "src", "main", "java");
        int maxDepth = 10;
        long maxFileSize = 100_000; // 100KB
        
        try (Stream<Path> paths = Files.walk(startPath, maxDepth)) {
            return paths
                .filter(Files::isRegularFile)
                .filter(p -> p.toString().endsWith(".java"))
                .filter(p -> {
                    try {
                        return Files.size(p) <= maxFileSize;
                    } catch (IOException e) {
                        return false;
                    }
                })
                .map(p -> {
                    try {
                        return "File: " + p + "\n" + Files.readString(p);
                    } catch (IOException e) {
                        return "Error reading: " + p;
                    }
                })
                .collect(Collectors.joining("\n\n"));
        }
    }
}
